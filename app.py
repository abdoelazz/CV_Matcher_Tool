import streamlit as st
import time
import json
from PIL import Image

from main_script import (
    extract_text_from_pdf,
    getting_prompt_CV_personalised,
    getting_prompt_offre_personalised,
    LLM_Request,
    json_schema_CV,
    json_schema_Offre,
    calcule_exp,
    keywords_processing,
    keywords_processing_offre,
    calculating_similarity
    )
def main():
    st.set_page_config(page_title="Analyse Offre vs CV", layout="centered")
    st.logo("images/LOGO.png", size="large", link=None, icon_image=None)

    st.title("üß† Analyse de Correspondance : Offre d'emploi ‚ÜîÔ∏è CV")

    # Choix du mod√®le LLM
    st.subheader("üß† Choisissez un mod√®le LLM")
    llm_model_display = {
    "google/gemini-2.0-flash-001": "üîµ Gemini 2.0 Flash (payant)",
    "anthropic/claude-sonnet-4": "üü£ Claude Sonnet 4 (payant)",
    "openai/gpt-4o-mini": "üü° GPT-4o mini (payant)",
    "deepseek/deepseek-r1-zero:free": "üü¢ DeepSeek R1 Zero (gratuit)"
    }

    selected_label = st.selectbox(
        "üß† S√©lectionnez le mod√®le de langage √† utiliser :",
        options=list(llm_model_display.values()),
        index=3
    )

    # R√©cup√©rer le mod√®le r√©el √† partir du libell√© s√©lectionn√©
    llm_model = [key for key, val in llm_model_display.items() if val == selected_label][0]


    
    # Saisie de la cl√© API
    st.subheader("üîë Cl√© API du mod√®le LLM")
    api_key = st.text_input("Entrez votre cl√© API :", type="password")
    if not api_key:
        st.warning("üö® Veuillez entrer votre cl√© API pour continuer.")
        st.stop()

    # √âtape 1 : Coller l'offre
    st.subheader("1Ô∏è‚É£ Coller ici l'offre d'emploi")
    offre_text = st.text_area("üìã Contenu de l'offre d'emploi :", height=250)

    # √âtape 2 : T√©l√©charger les CVs
    st.subheader("2Ô∏è‚É£ Uploader un ou plusieurs CVs")
    uploaded_files = st.file_uploader("üìé S√©lectionner des fichiers PDF", type=["pdf"], accept_multiple_files=True)

    # √âtape 3 : Lancer l'analyse
    if offre_text and uploaded_files:
        st.subheader("3Ô∏è‚É£ R√©sultats de l‚Äôanalyse")
        for file in uploaded_files:
            st.markdown(f"---\n### üìÑ R√©sultats pour : `{file.name}`")
            with st.spinner("‚è≥ Analyse en cours..."):

                # Extraire le texte depuis le PDF upload√©
                cv_text = extract_text_from_pdf(file)
                if not cv_text.strip():
                    st.warning("‚ö†Ô∏è Le texte extrait du PDF est vide. Impossible de poursuivre l'analyse.")
                    continue  # passe au fichier suivant

                # Pr√©parer les prompts
                prompt_CV = getting_prompt_CV_personalised(cv_text)
                prompt_offre = getting_prompt_offre_personalised(offre_text)

                # Appeler le mod√®le LLM
                CV_data, CV_info = LLM_Request(json_schema_CV, llm_model, api_key, prompt_CV)
                time.sleep(1)  # <-- Pause 1 seconde avant d'envoyer la requ√™te offre (optionnel)
                offre_data, offre_info = LLM_Request(json_schema_Offre, llm_model, api_key, prompt_offre)
                time.sleep(1)  # <-- Pause 1 seconde avant d'envoyer la requ√™te CV suivant

                # Charger le JSON retourn√© par le LLM
                try:
                    json_CV_info = json.loads(CV_info)
                    json_offre_info = json.loads(offre_info)
                except json.JSONDecodeError:
                    st.error("Erreur lors du d√©codage JSON retourn√© par le mod√®le.")
                    continue

                # Calculs
                experience = calcule_exp(json_CV_info.get("experiences", []))
                keywords_Cv = keywords_processing(json_CV_info)
                keywords_Offre = keywords_processing_offre(json_offre_info)

                CV_inter = list(set(keywords_Cv) & set(keywords_Offre))
                similarity = calculating_similarity(" ".join(CV_inter), " ".join(keywords_Offre))
                print(similarity)
            # Affichage r√©sultats
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üïí Exp√©rience", f"{experience} an(s)")
            with col2:
                st.metric("üîç Score de Similarit√©", f"{similarity.item():.2f} %")

            st.write("‚úÖ Mots-cl√©s en commun :", ", ".join(CV_inter) if CV_inter else "Aucun mot-cl√© commun trouv√©.")

            with st.expander("üìò D√©tails JSON du CV analys√©"):
                st.json(json_CV_info)
            with st.expander("üìó D√©tails JSON de l'offre analys√©e"):
                st.json(json_offre_info)

    elif not offre_text:
        st.info("üìå Veuillez d'abord coller une offre d'emploi.")

    elif not uploaded_files:
        st.info("üìå Veuillez s√©lectionner au moins un CV en PDF.")
if __name__ == "__main__":
    main()